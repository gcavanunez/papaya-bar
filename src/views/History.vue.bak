<script setup lang="ts">
import AppInput from '@/components/forms/AppInput.vue'
import AppBtn from '@/components/AppBtn.vue'
import { debouncedRef } from '@vueuse/core'
import { onMounted, ref, watch, computed } from 'vue'
import { ClockIcon, DocumentDuplicateIcon, ArrowTopRightOnSquareIcon } from '@heroicons/vue/24/outline'
import { useSettings } from '@/hooks/useSettings'
import { formatUrlAsMarkdown, copyToClipboard } from '@/utils'
import { toast } from 'vue-sonner'
import { useVirtualizer } from '@tanstack/vue-virtual'

const search = ref('')
const debouncedSearch = debouncedRef(search, 500)

type MatchDTO = ReturnType<typeof matchDTO>
type VisitResultDTO = chrome.history.VisitItem & {
	title: string
	url: string
	lastVisitTime: number
}

function matchDTO(match: VisitResultDTO) {
	return {
		id: match.id,
		title: match.title,
		url: match.url,
		lastVisitTime: new Date(match.lastVisitTime || '').toLocaleString(),
		visitTime: new Date(match.visitTime || '').toLocaleString(),
	}
}
async function getHistory(query: chrome.history.HistoryQuery) {
	const results = await chrome.history.search({
		text: query.text,
		startTime: query.startTime,
		maxResults: 0, // Retrieve as much history data as possible
	})

	const allVisits: VisitResultDTO[] = []

	for (let i = 0; i < results.length; i++) {
		const element = results[i]

		if (element.url) {
			const visits = await chrome.history.getVisits({ url: element.url })

			visits.forEach(function (visit) {
				allVisits.push({
					...visit,
					title: element.title || '',
					url: element.url || '',
					lastVisitTime: element.lastVisitTime || new Date().getTime(),
				})
			})
		}
	}

	return allVisits.toSorted((a, b) => Number(b.visitTime) - Number(a.visitTime)) // Sort by visitTime descending
}

const historyMatches = ref<MatchDTO[]>([])
const now = Date.now()
const oneDay = now - 24 * 60 * 60 * 1000
const oneYearAgo = now - 365 * 24 * 60 * 60 * 1000

const { settings, loadSettings } = useSettings()

// Virtual scrolling setup
const parentRef = ref<HTMLElement>()
const virtualizer = computed(() => useVirtualizer({
	count: historyMatches.value.length,
	getScrollElement: () => parentRef.value || null,
	estimateSize: () => 88, // Estimated height of each history item in pixels
	overscan: 5, // Render 5 extra items outside viewport for smooth scrolling
}))

const copyHistoryItem = (item: MatchDTO) => {
	let content: string
	
	if (settings.value.copyLinksInMarkdownFormat) {
		content = formatUrlAsMarkdown(item.url, item.title)
	} else {
		content = `${item.title}\n${item.url}`
	}
	
	copyToClipboard(content)
	toast('History item copied to clipboard')
}

const openHistoryItem = (url: string) => {
	chrome.tabs.create({ url })
}

onMounted(() => {
	loadSettings()
	getHistory({ text: '', startTime: oneDay }).then((matches) => {
		historyMatches.value = matches.map((row) => matchDTO(row))
	})
})
watch(
	() => debouncedSearch.value,
	(newVal, _oldVal) => {
		getHistory({ text: newVal, startTime: oneYearAgo, maxResults: 0 }).then((matches) => {
			historyMatches.value = matches.map((row) => matchDTO(row))
		})
	},
)
</script>
<template>
	<div class="relative">
		<div class="container mx-auto max-w-7xl px-4 py-6 sm:px-2">
			<div class="px-4 sm:px-6 lg:px-8">
				<!-- Header Section -->
				<div class="sm:flex sm:items-center">
					<div class="sm:flex-auto">
						<div class="flex items-center gap-3 mb-2">
							<ClockIcon class="h-6 w-6 text-slate-600 dark:text-vercel-accents-5" />
							<h1 class="text-xl font-semibold text-slate-900 dark:text-white">
								Browser History
							</h1>
						</div>
						<p class="mt-2 text-sm text-slate-700 dark:text-vercel-accents-5">
							Search and manage your browsing history from the last 24 hours
						</p>
					</div>
				</div>

				<!-- Search Section -->
				<div class="mt-6 flex">
					<div class="lg:w-96">
						<AppInput v-model="search" label="Search history" placeholder="Search by title or URL..." />
					</div>
				</div>

				<!-- Results Stats -->
				<div v-if="historyMatches.length > 0" class="mt-4 text-sm text-slate-700 dark:text-vercel-accents-5">
					{{ historyMatches.length }} {{ historyMatches.length === 1 ? 'item' : 'items' }} found
				</div>

				<!-- History Items -->
				<div class="mt-6">
					<div v-if="historyMatches.length === 0" class="text-center py-12">
						<ClockIcon class="mx-auto h-12 w-12 text-slate-400 dark:text-vercel-accents-4" />
						<h3 class="mt-2 text-sm font-medium text-slate-900 dark:text-white">No history found</h3>
						<p class="mt-1 text-sm text-slate-500 dark:text-vercel-accents-4">
							{{ search ? 'Try adjusting your search terms.' : 'No browsing history from the last 24 hours.' }}
						</p>
					</div>

					<div v-else class="overflow-hidden shadow ring-1 ring-black ring-opacity-5 dark:border dark:border-vercel-accents-2 md:rounded-lg">
						<div
							ref="parentRef"
							class="h-96 overflow-auto bg-white dark:bg-black"
							style="contain: strict;"
						>
							<div
								:style="{
									height: `${virtualizer.getTotalSize()}px`,
									width: '100%',
									position: 'relative',
								}"
							>
								<div
									v-for="virtualRow in virtualizer.getVirtualItems()"
									:key="virtualRow.index"
									:style="{
										position: 'absolute',
										top: 0,
										left: 0,
										width: '100%',
										height: `${virtualRow.size}px`,
										transform: `translateY(${virtualRow.start}px)`,
									}"
								>
									<div
										class="group hover:bg-slate-50 dark:hover:bg-vercel-accents-1 transition-colors border-b border-slate-200 dark:border-vercel-accents-2"
									>
										<div class="flex items-center justify-between px-4 py-4 sm:px-6">
											<div class="flex min-w-0 flex-1 items-center">
												<div class="min-w-0 flex-1">
													<div class="flex items-center">
														<div class="min-w-0 flex-1">
															<p class="truncate text-sm font-medium text-slate-900 dark:text-white">
																{{ historyMatches[virtualRow.index].title || 'Untitled' }}
															</p>
															<p class="truncate text-sm text-slate-500 dark:text-vercel-accents-4">
																{{ historyMatches[virtualRow.index].url }}
															</p>
														</div>
													</div>
													<div class="mt-2 flex items-center text-xs text-slate-500 dark:text-vercel-accents-4">
														<ClockIcon class="mr-1.5 h-3 w-3 flex-shrink-0" />
														{{ historyMatches[virtualRow.index].visitTime }}
													</div>
												</div>
											</div>
											<div class="ml-4 flex items-center space-x-2">
												<AppBtn
													color="round-primary"
													@click="copyHistoryItem(historyMatches[virtualRow.index])"
													title="Copy link"
												>
													<DocumentDuplicateIcon class="size-4" />
												</AppBtn>
												<AppBtn
													color="round-primary"
													@click="openHistoryItem(historyMatches[virtualRow.index].url)"
													title="Open in new tab"
												>
													<ArrowTopRightOnSquareIcon class="size-4" />
												</AppBtn>
											</div>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</template>
